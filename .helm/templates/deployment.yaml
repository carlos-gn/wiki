apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wiki.fullname" . }}
  labels:
    {{- include "wiki.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "wiki.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "wiki.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "wiki.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: secret-injector
          image: '221581667315.dkr.ecr.eu-west-1.amazonaws.com/secret-injector:latest'
          env:
            - name: SECRET_ARN
              value: {{$.Values.deployment.secret}}
            - name: FEATURES_TOKEN
              value: {{$.Values.deployment.features}}
            - name: STAGE
              value: {{$.Values.deployment.env.STAGE}}
          volumeMounts:
            - name: secrets
              mountPath: '/secrets'
            - name: features
              mountPath: '/features'
        - name: nc
          image: public.ecr.aws/runecast/busybox:1.33.1
          command:
            - sh
          args:
            - -c
            - |
              if [[ -z $DATABASE_URL ]]; then
                echo "Using RDS database"
              else
                for i in {1..100}; do nc -z postgres 5432 && break || sleep 3; done
              fi
              echo all dependencies are up
          env:
          {{- range $key, $value := $.Values.deployment.env}}
            - name: {{ $key }}
              value: {{ $value }}
          {{- end}}
      {{- if .Values.sideload.enabled }}
        - name: {{ .Chart.Name }}-sideload
          image: "{{ .Values.image.repository }}:{{ default "latest" .Values.deployment.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.image.imagePullPolicy }}
          env:
            {{- toYaml .Values.sideload.env | nindent 12 }}
          command: [ "sh", "-c" ]
          args: [ "mkdir -p /wiki/data/sideload && git clone --depth=1 {{ .Values.sideload.repoURL }} /wiki/data/sideload/" ]
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ default "latest" .Values.deployment.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.image.imagePullPolicy }}
          env:
            - name: DB_TYPE
              value: postgres
            - name: DATABASE_URL
              value: {{ .Values.externalPostgresql.databaseURL }}
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: {{ default "1" .Values.externalPostgresql.NODE_TLS_REJECT_UNAUTHORIZED | quote }}
            - name: HA_ACTIVE
              value: {{ .Values.replicaCount | int | le 2 | quote }}
    {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
    {{- end }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      nodeSelector:
        eks.amazonaws.com/nodegroup: development
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: secrets
          emptyDir:
            medium: Memory
        - name: features
          emptyDir:
            medium: Memory

